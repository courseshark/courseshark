var http = require('http'),
    util = require('util'),
    url = require('url'),
    querystring = require('querystring'),
    EventEmitter = require('events').EventEmitter,
    fs = require('fs'),
    request = require('request');

/**
 * Provides functionality for OAuth2 authorization with MailChimp. A server is
 * set up that listens for requests from MailChimp that are made upon 
 * successful user authentication. Using this server the whole workflow 
 * necessary to authorize against MailChimp is made available.
 * 
 * The workflow using this module in short is as follows. An example can be 
 * found in the README.
 * 
 *  1) Instatiate MailChimpOAuth.
 *  2) Send the user to the MailChimp login form using the url returned from
 *     MailChimpOAuth.getAuthorizeUri();
 *  3) Listen for the 'authed' event and pass MailChimpOAuth.api as th API key
 *     to whatever MailChimp API methods you want to use.
 * 
 * Details on the process and further information on how to set everything up
 * are available in the MailChimp API docs.
 * 
 * @see http://apidocs.mailchimp.com/oauth2/
 * 
 * Available options are:
 *  - clientId     The clientId can be obtained from MailChimp, please refer to
 *                 the API docs on how to do this. The clientId is a required
 *                 parameter.
 *  - clientSecret The clientSecret can be obtained from MailChimp, please 
 *                 refer to the API docs on how to do this. The clientSecret is
 *                 a required parameter. 
 *  - serverUri    The URI to reach this server from the internet. This URI is
 *                 required as MailChimp sends a request upon successful
 *                 authorization of a user.
 *  - redirectUri  After a successful authorization on the MailChimp website
 *                 the user is redirected to this website, if any. 
 *  - port         Port the server is going to listen on. Defaults to 8100.
 *  - secure       Takes credentials generated by the crypto module and enables
 *                 HTTPS support for the server when present. 
 *  
 * @param options Configuration options 
 * @return Nothing. Emits an 'authed' event instead which indicates everything
 *         went fine
 */
function MailChimpOAuth (options) {
	
	var self = this;
	
	this.code;
	this.accessToken;
	this.metadata;
	this.apiKey;
	
	if (!options) 
		var options = {};
	
	EventEmitter.call(this);
	
	this.httpPort = options.port || 8100;
	this.secure = options.secure || false;
	this.redirectUri = options.redirectUri || false;
	
	if (typeof options.clientId !== 'undefined') {
		this.clientId = options.clientId;
	} else {
		throw 'You have to specify the client id for this to work.';
	}
	
	if (typeof options.clientSecret !== 'undefined') {
		this.clientSecret = options.clientSecret;
	} else {
		throw 'You have to specify the client secret for this to work.';
	}
	
	if (typeof options.serverUri !== 'undefined') {
		this.serverUri = options.serverUri;
	} else {
		throw 'You have to specify a uri for this server as MailChimp needs to reach it from the outside.';
	}
	
	try {
		var packageInfo = fs.readFileSync(__dirname+"/../../package.json");
	} catch (error) {
		throw 'Required package file package.json not found for this module.';
	}
	this.packageInfo = JSON.parse(packageInfo.toString());
	
	this.on('receivedCode', function () {
		self.getAccessToken();
	});
	
	this.on('receivedAccessToken', function () {
		self.getMetadata();
	});
	
	this.on('receivedMetadata', function () {
		self.emit('authed', self.apiKey);
	});

	this.spawnServer();
	
}

util.inherits(MailChimpOAuth, EventEmitter);
module.exports = MailChimpOAuth;

/**
 * Spawns a server that listens for incoming GET requests. The url to the 
 * server is passed on to MailChimp as a get parameter to the authorization
 * form. When a request is received and valid the chain of authorization is set
 * in motion. This method should not be called directly but will be used 
 * internally when needed.
 * 
 * @return Nothing. Emits either an 'error' or a 'receivedCode' event
 */
MailChimpOAuth.prototype.spawnServer = function () {
	
	var self = this;
	
	var server = http.createServer(function (request, response) {

		if (request.method != 'GET') {
			self.emit('error', 'Received something other than a GET request.');
			response.writeHead(500, { 'Content-Type' : 'text/plain' });
			response.end();
			return;
		}
		
		var requestUrl = url.parse(request.url);
		var query      = querystring.parse(requestUrl.query);
		
       	if (typeof query.code !== 'undefined') {

       		self.code = query.code;
       		self.emit('receivedCode');
       		
       		if (self.redirectUri) {
       			response.writeHead(302, { 'Location' : self.redirectUri })
       			response.end();
       		} else {
       			response.writeHead(204, { 'Content-Type' : 'text/plain' });
       			response.end();
       		}
       		
   		} else {

   			self.emit('error', 'Received a request without a code.');
   			
   			response.writeHead(500, { 'Content-Type' : 'text/plain' });
   			response.end();
   			
   		}
    		
	});
	
	if (this.secure)
		server.setSecure(this.secure);

	server.listen(this.httpPort);
	
}

/**
 * Assembles and returns a URI the user needs to be send to for authorization,
 * on that page the MailChimp login form is shown and the user prompted for his
 * username and password. The URI includes a link to the server spawned while
 * instantiating MailChimpOAuth.
 * 
 * @return URI to the autorization page
 */
MailChimpOAuth.prototype.getAuthorizeUri = function () {
	
	var params = {
		response_type: 'code',
		client_id: this.clientId,
		redirect_uri: this.serverUri+':'+this.httpPort
	};
	
	return 'https://login.mailchimp.com/oauth2/authorize?'+querystring.stringify(params);
	
}

/**
 * Get the access token from MailChimp once the code for a successful 
 * authorization was received. When the access token was successfully received
 * an event is emitted which MailChimpOAuth is listening on to request the 
 * OAuth metadata. This method should not be called directly but will be used 
 * internally when needed.
 * 
 * @return Nothing. Emits either an 'error' or a 'receivedAccessToken' event
 */
MailChimpOAuth.prototype.getAccessToken = function () {
	
	var self = this;
	
	var params = {
		grant_type: 'authorization_code',
		client_id: this.clientId,
		client_secret: this.clientSecret,
		code: this.code,
		redirect_uri: this.serverUri+':'+this.httpPort
	};
	
	request({
		uri : 'https://login.mailchimp.com/oauth2/token',
		method: 'POST',
		headers : { 
			'User-Agent' : 'node-mailchimp/'+this.packageInfo['version'],
			'Content-Type': 'application/x-www-form-urlencoded'
		},
		body : querystring.stringify(params)
	}, function (error, response, body) {
		
		var parsedResponse;
		
		if (error) {
			self.emit('error', 'Unable to connect to the MailChimp OAuth service.');
			return;
		} else {
			
			try {
				parsedResponse = JSON.parse(body); 
			} catch (error) {
				self.emit('error', 'Error parsing JSON answer from the MailChimp API.');
				return;
			}
			
			if (typeof parsedResponse.access_token !== 'undefined') {
				self.accessToken = parsedResponse.access_token;
				self.emit('receivedAccessToken');
			} else {
				self.emit('error', 'Answer from MailChimp API does not contain an access token.');
			}
			
		}
		
	});
	
}

/**
 * Get metadata from MailChimp once the access token was received. When the 
 * metadata was successfully received an event is emitted which MailChimpOAuth 
 * is listening on to finalize the authentication process. This method should
 * not be called directly but will be used internally when needed.
 * 
 * @return Nothing. Emits either an 'error' or a 'receivedMetadata' event
 */
MailChimpOAuth.prototype.getMetadata = function () {

	var self = this;
	
	request({
		uri : 'https://login.mailchimp.com/oauth2/metadata',
		headers : { 
			'User-Agent' : 'node-mailchimp/'+this.packageInfo['version'],
			'Authorization' : 'OAuth '+this.accessToken
		}
	}, function (error, response, body) {

		var parsedResponse;
		
		if (error) {
			self.emit('error', 'Unable to connect to the MailChimp OAuth service.');
			return;
		} else {
			
			try {
				parsedResponse = JSON.parse(body); 
			} catch (error) {
				self.emit('error', 'Error parsing JSON answer from the MailChimp API.');
				return;
			}
			
			if (typeof parsedResponse.dc !== 'undefined') {
				self.metadata = parsedResponse;
				self.apiKey = self.accessToken+'-'+self.metadata.dc;
				self.emit('receivedMetadata');
			} else {
				self.emit('error', 'Answer from MailChimp API does not contain a datacenter pointer.');
			}
			
		}
		
	});
	
}