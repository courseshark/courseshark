// Generated by CoffeeScript 1.3.3
var clone, coffeeScript, fs, mkdirp, path, url;

coffeeScript = require('coffee-script');
fs = require('fs');
path = require('path');
url = require('url');

clone = function(src) {
  var obj, prop, val, _i, _len, _results;
  if (src === Object(src)) {
    if (toString.call(src) === '[object Array]') {
      return src.slice();
    } else {
      obj = {};
      _results = [];
      for (val = _i = 0, _len = src.length; _i < _len; val = ++_i) {
        prop = src[val];
        _results.push(obj[prop] = src[prop]);
      }
      return _results;
    }
  }
};

/*

A simple connect middleware to serve CoffeeScript files.

@param {Object} options
@return {Function}
@api public
*/
module.exports = function(options) {
  var baseDir, dest, src, _ref;
  if (options == null) {
    options = {};
  }
  if (typeof options === 'string') {
    options = {
      src: options
    };
  }
  baseDir = options.baseDir || process.cwd();
  src = options.src;
  if (!src) {
    throw new Error('Coffeescript middleware requires "src" directory');
  }
  src = path.resolve(baseDir, src);
  dest = options.dest ? options.dest : src;
  dest = path.resolve(baseDir, dest);
  if ((_ref = options.compile) == null) {
    options.compile = function(str, options) {
      return coffeeScript.compile(str, clone(options));
    };
  }
  return function(req, res, next) {
    var coffeePath, compile, error, jsPath, pathname;
    if ('GET' !== req.method && 'HEAD' !== req.method) {
      return next();
    }
    pathname = url.parse(req.url).pathname;
    if (/\.js$/.test(pathname)) {
      jsPath = path.join(dest, pathname);
      coffeePath = path.join(src, pathname.replace('.js', '.coffee'));
      error = function(err) {
        var arg;
        arg = 'ENOENT' === err.code ? null : err;
        return next(arg);
      };
      compile = function() {
        return fs.readFile(coffeePath, 'utf8', function(err, str) {
          var js;
          if (err) {
            return error(err);
          }
          try {
            js = options.compile(str, options);
          } catch (err) {
            return next(err);
          }
          res.setHeader('Content-Type', 'text/javascript');
          res.send(js);
          return;
        });
      };
      if (options.force) {
        return compile();
      }
      return fs.stat(coffeePath, function(err, coffeeStats) {
        if (err) {
          return error(err);
        }
        return fs.stat(jsPath, function(err, jsStats) {
          if (err) {
            if ('ENOENT' === err.code) {
              return compile();
            } else {
              return next(err);
            }
          } else {
            if (coffeeStats.mtime > jsStats.mtime) {
              return compile();
            } else {
              return next();
            }
          }
        });
      });
    } else {
      return next();
    }
  };
};
