#!/bin/bash
#
# CourseShark run file
#
#
NODE_VER="v0.6.19";


CS_DIR=`pwd`;
BIN_DIR=$CS_DIR/bin;
NEW_PATH=$BIN_DIR/node/bin:$PATH;
CUSTOM_NODE=$BIN_DIR/node/bin/node;

OUT_LOG=$CS_DIR/logs/info.log;

#make sure log directory exists
mkdir -p $CS_DIR/logs;
# Make the bin directiory
mkdir -p $BIN_DIR;

BLUE="$(tput setaf 4)";
GREEN="$(tput setaf 2)";
YELLOW="$(tput setaf 3)";
RED="$(tput setaf 1)";
RESET="$(tput sgr0)";


function INSTALL {
  echo "Installing nodejs $NODE_VER";
  cd /tmp;
  if [ -d "/tmp/node" ]
  then
    cd node;
    git checkout $NODE_VER;
  else
    git clone http://github.com/joyent/node.git
    cd node;
    git checkout $NODE_VER;
  fi
  make clean;
  ./configure --prefix=$BIN_DIR/node;
  make;
  make install;

  ## Install Dependancies
  cd $CS_DIR
  (
    export PATH=$NEW_PATH;
    npm install forever nodemon -g;
    npm install;
  )
}

function NODE_VERSION_CHECK {
	CURRENT_NODE_VERSION="$(export PATH=$NEW_PATH; node -v)";
	if [ $CURRENT_NODE_VERSION != $NODE_VER ]
	then
		NEW_PATH=$PATH
		CURRENT_NODE_VERSION="$(node -v)";
		if [ $CURRENT_NODE_VERSION != $NODE_VER ]
		then
			echo $RED;
			echo "Wrong version of node installed!"
			echo $RESET;
			INSTALL;
		fi
	fi
}


function SANITY_CHECK {
	if [ $CHECK_VERSION == true ]
	then
		NODE_VERSION_CHECK;
	else
		echo $YELLOW;
		echo "Skipping node version test"
	fi
}


CHECK_VERSION=true;
for var in "$@"
do
	if [ "$var" == "--ignore-version" ]
	then
		CHECK_VERSION=false;
	fi
done


if [ "$1" == "install" ]
then
  INSTALL;
  exit;
fi

if [ "$1" == "deps" ]
then
 (
		export PATH=$NEW_PATH;
  	#npm install -g requirejs forever nodemon;
		npm install;
 )
 exit;
fi


if [ -f $CUSTOM_NODE ]
then
  : # no-op
else
  echo "";
  echo "[warn] No node found.";
  INSTALL;
fi

if [ "$1" == "seatwatcher" ]
then
	SANITY_CHECK;
	echo $GREEN;
	echo "Starting seatwatcher with forever";
	(
		export PATH=$NEW_PATH;
		forever stopall;
	 	forever start -a -l $OUT_LOG ./seat-watcher.js;
	)
	exit;
fi

if [ "$1" == "nodemon" ]
then
	SANITY_CHECK;
	echo $BLUE
	echo "starting with nodemon $RESET";
	(
		export PATH=$NEW_PATH;

		#coffee --compile ./public/scripts/backbone-schedule/;

		#r.js -o \
		#	baseUrl=./public/scripts/backbone-schedule \
		#	name=main \
		#	out=./public/scripts/backbone-schedule/build.main.js \
		#		paths.jQuery=./lib/jquery/jquery.req \
		#		paths.Underscore=./lib/underscore/underscore.req \
		#		paths.Backbone=./lib/backbone/backbone.req \
		#		paths.requireLib=../lib/require/require \
		#		include=requireLib;

	 	nodemon ./app.js;
	)
else
	if [ "$1" == "forever" ]
	then
		if [ "$2" == "install" ]
		then
			(
				export PATH=$NEW_PATH;
				echo $GREEN;
				echo "startting with nodemon $RESET";
				npm install forever -g
			)
		else
			SANITY_CHECK;
			echo $BLUE;
			echo "startting with forever $RESET";
			(
				export PATH=$NEW_PATH;
				shift 1;
				echo $@;
				forever $@ ./app.js;
			)
		fi
	else
		if [ "$1" == "start" ]
		then
			if [ $NODE_ENV == "development" ]
			then
				echo "";
				echo "Starting :: $(tput setaf 4)Dev Environment";
				echo "$(tput setaf 2)  * nodemon watching scripts";
				echo "  * no node version check (running $(tput sgr0)$(tput setaf 3)$(export PATH=$NEW_PATH; node -v;)$(tput setaf 2))";
				echo "$RESET";
				(
					export PATH=$NEW_PATH;
					nodemon ./app.js;
				)
				exit;
			fi
			SANITY_CHECK;
			echo $BLUE;
			echo "startting with forever $RESET";
			(
				export PATH=$NEW_PATH;
				forever stopall;
				forever start -a -l $OUT_LOG $CS_DIR/app.js;
			)
		else
			if [ "$1" == "stop" ]
			then
				echo $RED;
				echo "stopping $RESET";
				(
					export PATH=$NEW_PATH;
					forever stopall;
				)
			else
				if [ $NODE_ENV == "development" ]
				then
					echo "";
					echo "Starting :: $(tput setaf 4)Dev Environment";
					echo "$(tput setaf 2)  * nodemon watching scripts";
					echo "  * no node version check (running $(tput sgr0)$(tput setaf 3)$(export PATH=$NEW_PATH; node -v;)$(tput setaf 2))";
					echo "$RESET";
					(
						export PATH=$NEW_PATH;
						nodemon ./app.js;
					)
					exit;
				fi
				echo $YELLOW;
				echo "restarting $RESET";
				(
					export PATH=$NEW_PATH;
					forever stopall;
					forever start -a -l $OUT_LOG $CS_DIR/app.js;
				)
			fi
		fi
	fi
fi
